name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  msrv: 1.70.0
  nightly: nightly-2023-09-09
  protoc: "24.4"
  grpcurl: 1.8.8
  binaryen: version_116

jobs:
  build-msrv:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.msrv }}
          targets: wasm32-unknown-unknown
      - name: Install protoc
        run: |
          wget -q -O protoc.zip "https://github.com/protocolbuffers/protobuf/releases/download/v$protoc/protoc-$protoc-linux-x86_64.zip" && \
          unzip -d protoc protoc.zip && \
          sudo cp -r protoc/include/* /usr/local/include && \
          sudo install protoc/bin/protoc /usr/local/bin

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-msrv-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-msrv-cargo

      - name: Build libraries
        run: cargo build -p tardigrade -p tardigrade-rt -p tardigrade-worker -p tardigrade-grpc --lib --all-features
      - name: Build E2E test crate
        run: cargo build -p tardigrade-pizza --lib --target wasm32-unknown-unknown --profile wasm

  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: wasm32-unknown-unknown
          components: rustfmt, clippy
      - name: Install protoc
        run: |
          wget -q -O protoc.zip "https://github.com/protocolbuffers/protobuf/releases/download/v$protoc/protoc-$protoc-linux-x86_64.zip" && \
          unzip -d protoc protoc.zip && \
          sudo cp -r protoc/include/* /usr/local/include && \
          sudo install protoc/bin/protoc /usr/local/bin
      - name: Install grpcurl
        run: |
          (
            mkdir .grpcurl && cd .grpcurl && \
            wget -q -O grpcurl.tar.gz "https://github.com/fullstorydev/grpcurl/releases/download/v$grpcurl/grpcurl_${grpcurl}_linux_x86_64.tar.gz" && \
            tar xf grpcurl.tar.gz && \
            sudo install grpcurl /usr/local/bin
          )
      - name: Install wasm-opt
        run: |
          wget -q -O binaryen.tar.gz "https://github.com/WebAssembly/binaryen/releases/download/$binaryen/binaryen-$binaryen-x86_64-linux.tar.gz" && \
          tar xf binaryen.tar.gz && \
          sudo install "binaryen-$binaryen/bin/wasm-opt" /usr/local/bin
      - name: Install cargo-deny
        uses: baptiste0928/cargo-install@v2
        with:
          crate: cargo-deny
          version: "^0.14"

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo

      - name: Format
        run: cargo fmt --all -- --check
      - name: Clippy
        run: cargo clippy --workspace --all-features --all-targets -- -D warnings
      - name: Clippy (WASM client bindings)
        run: cargo clippy -p tardigrade --lib --target wasm32-unknown-unknown -- -D warnings
      - name: Clippy (runtime, no features)
        run: cargo clippy -p tardigrade-rt --lib --no-default-features -- -D warnings
      - name: Clippy (gRPC client)
        run: cargo clippy -p tardigrade-grpc --lib --no-default-features --features client -- -D warnings
      - name: Check dependencies
        run: cargo deny --workspace --all-features check

      # Build the E2E and CLI crates first to speed up its testing.
      - name: Build E2E test crate
        run: cargo build -p tardigrade-pizza --lib --target wasm32-unknown-unknown --profile wasm
      - name: Build CLI crate
        run: cargo build -p tardigrade-cli --all-features

      - name: Run tests
        run: cargo test --workspace --all-features --all-targets
      - name: Run doc tests
        run: cargo test --workspace --all-features --doc
      - name: Run gRPC end-to-end tests
        run: |
          ./crates/cli/tests/test-server.sh
          ./crates/cli/tests/test-server.sh uds
          ./e2e-tests/pizza/tests/test-grpc.sh

  document:
    if: github.event_name == 'push'
    needs:
      - build
      - build-msrv
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.nightly }}
      - name: Install protoc
        run: |
          wget -q -O protoc.zip "https://github.com/protocolbuffers/protobuf/releases/download/v$protoc/protoc-$protoc-linux-x86_64.zip" && \
          unzip -d protoc protoc.zip && \
          sudo cp -r protoc/include/* /usr/local/include && \
          sudo install protoc/bin/protoc /usr/local/bin

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-document-cargo-${{ hashFiles('Cargo.lock') }}
          restore-keys: ${{ runner.os }}-document-cargo

      - name: Build docs
        run: |
          cargo clean --doc && \
          cargo rustdoc -p tardigrade-shared --all-features -- --cfg docsrs && \
          cargo rustdoc -p tardigrade --all-features -- --cfg docsrs && \
          cargo rustdoc -p tardigrade-worker --all-features -- --cfg docsrs && \
          cargo rustdoc -p tardigrade-rt --all-features -- --cfg docsrs && \
          cargo rustdoc -p tardigrade-grpc --all-features -- --cfg docsrs

      - name: Deploy
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: target/doc
          single-commit: true
